{"version":3,"sources":["components/Input.tsx","components/Container.tsx","components/Card.tsx","components/Placeholder.tsx","components/Party.tsx","components/Home.tsx","utils/debounce.ts","App.tsx","index.tsx"],"names":["CustomInput","styled","input","Input","onInput","e","props","currentTarget","value","React","Component","CardContainer","div","Container","this","children","Wrapper","Close","Card","className","readonly","onClick","handleCardClick","character","alt","src","image","handleCloseClick","id","width","height","viewBox","fill","xmlns","d","fillOpacity","PlaceholderWrapper","Placeholder","FlexWrapper","Title","Party","selection","rick","morty","GET_CHARACTERS","gql","Home","useState","results","hiddenCardIds","visibleCards","query","state","setState","stopPropagation","hiddenIds","slice","push","item","name","includes","handleInput","fn","timeout","params","clearTimeout","setTimeout","debounce","length","useQuery","variables","error","data","loading","list","characters","filter","map","key","Array","_","i","client","ApolloClient","uri","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6ac9da0.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\ninterface IInput {\n  onInput: (value: string) => void;\n}\n\nconst CustomInput = styled.input`\n  padding: 0 27px;\n  color: black;\n  background: white;\n  border: none;\n  font-weight: 300;\n  font-size: 30px;\n  line-height: 35px;\n  border: 1px solid #A0A0A0;\n  height: 80px;\n  min-width: 100%;\n`;\n\nexport class Input extends React.Component<IInput> {\n  render() {\n    return (\n      <CustomInput onInput={(e) => this.props.onInput(e.currentTarget.value)}/>\n    );\n  }\n}\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\n\nconst CardContainer = styled.div`\n  margin-top: 30px;\n  width: calc(100% + 30px);\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\ninterface IContainerProps {\n  children: ReactElement[];\n}\n\nexport class Container extends React.Component<IContainerProps> {\n  render() {\n    return (\n      <CardContainer>\n        {this.props.children}\n      </CardContainer>\n    );\n  }\n}\n","import React, { MouseEvent } from 'react';\nimport styled from 'styled-components';\n\nimport { Character } from '../types/Character';\n\nconst Wrapper = styled.div`\n  width: 180px;\n  height: 220px;\n  overflow: hidden;\n  position: relative;\n  margin: 15px;\n  cursor: pointer;\n\n  &.readonly {\n    cursor: default;\n  }\n\n  &:hover .close {\n    display: block;\n  }\n\n  & img {\n    height: 100%;\n  }\n`;\n\nconst Close = styled.div`\n  position: absolute;\n  cursor: pointer;\n  top: 8px;\n  right: 8px;\n  width: 30px;\n  height: 30px;\n  display: none;\n`;\n\ninterface ICard {\n  character: Character;\n  readonly?: boolean;\n  handleCloseClick?: (e: MouseEvent, id: string) => void;\n  handleCardClick?: (character: Character) => void;\n}\n\nexport class Card extends React.Component<ICard> {\n\n  render() {\n    return (\n      <Wrapper\n        className={this.props.readonly ? 'readonly' : ''}\n        onClick={() => this.props.handleCardClick?.(this.props.character)}\n      >\n        <img alt=\"Card\" src={this.props.character.image}/>\n\n        {!this.props.readonly ? \n          <Close\n            className=\"close\"\n            onClick={(e) => this.props.handleCloseClick?.(e, this.props.character.id)}\n          >\n            <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M30 15C30 23.2843 23.2843 30 15 30C6.71573 30 0 23.2843 0 15C0 6.71573 6.71573 0 15 0C23.2843 0 30 6.71573 30 15Z\" fill=\"white\" fillOpacity=\"0.75\"/>\n              <path d=\"M20 11.0071L18.9929 10L15 13.9929L11.0071 10L10 11.0071L13.9929 15L10 18.9929L11.0071 20L15 16.0071L18.9929 20L20 18.9929L16.0071 15L20 11.0071Z\" fill=\"black\"/>\n            </svg>\n\n          </Close>\n          : ''\n        }\n      </Wrapper>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst PlaceholderWrapper = styled.div`\n  width: 180px;\n  height: 220px;\n  overflow: hidden;\n  background: #DADADA;\n  color: white;\n  display: inline-block;\n  font-size: 24px;\n  line-height: 28px;\n  display: inline-flex;\n  align-items: flex-end;\n  justify-content: center;\n  padding-bottom: 14px;\n  margin: 15px;\n`;\n\ninterface IPlaceholderProps {\n  children?: string;\n}\n\nexport class Placeholder extends React.Component<IPlaceholderProps> {\n  render() {\n    return (\n      <PlaceholderWrapper>\n        {this.props.children}\n      </PlaceholderWrapper>\n    );\n  }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Card } from './Card';\nimport { Placeholder } from './Placeholder';\n\nimport { Character } from '../types/Character';\n\ninterface IParty {\n  selection: {\n    rick: null | Character,\n    morty: null | Character\n  }\n}\n\nconst FlexWrapper = styled.div`\n  display: flex;\n`;\n\nconst Title = styled.div`\n    font-size: 30px;\n    line-height: 35px;\n    margin-bottom: 5px;\n    margin-top: 100px;\n    font-weight: bold;\n`;\n\n\nexport class Party extends React.Component<IParty> {\n  render() {\n    return (\n      <div>\n        <Title>PARTY</Title>\n        <FlexWrapper>\n          { this.props.selection.rick\n            ? <Card character={this.props.selection.rick} readonly/>\n            : <Placeholder>RICK</Placeholder>\n          }\n          { this.props.selection.morty\n            ? <Card character={this.props.selection.morty} readonly/>\n            : <Placeholder>MORTY</Placeholder>\n          }\n        </FlexWrapper>\n      </div>\n    );\n  }\n}","import React, { MouseEvent, useState, ReactElement } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nimport { Input } from './Input';\nimport { Container } from './Container';\nimport { Party } from './Party';\nimport { Card } from './Card';\nimport { Placeholder } from './Placeholder';\n\nimport { Character } from '../types/Character';\nimport { AppState } from '../types/AppState';\n\nimport { debounce } from '../utils/debounce';\n\nconst GET_CHARACTERS = gql`\n  query Query($query: String) {\n    characters(filter: { name: $query }) {\n      results {\n        name,\n        id,\n        image\n      } \n    }\n  }\n`;\n\nexport function Home(): ReactElement {\n\n  const [state, setState] = useState<AppState>({\n    results: [],\n    hiddenCardIds: [],\n    visibleCards: [],\n    query: '',\n    selection: {\n      rick: null,\n      morty: null\n    }\n  });\n\n  const handleCloseClick = (e: MouseEvent, id: string) => {\n    e.stopPropagation();\n    const hiddenIds: string[] = state.hiddenCardIds.slice();\n\n    hiddenIds.push(id);\n    setState({ ...state, hiddenCardIds: hiddenIds });\n  }\n\n  const handleCardClick = (item: Character) => {\n    if (item.name.includes('Rick')) {\n      setState({ ...state, selection: { rick: item, morty: state.selection.morty } });\n    }\n    if (item.name.includes('Morty')) {\n      setState({ ...state, selection: { morty: item, rick: state.selection.rick } });\n    }\n  }\n\n  const handleInput = debounce((value: string) => {\n    value.length > 2 && setState({...state, query: value });\n  }, 300);\n\n  const { error, data, loading } = useQuery(GET_CHARACTERS, {\n    variables: { query: state.query },\n  });\n  let list = [];\n  if (error) {\n    list = [];\n  } else if (data) {\n    list = data.characters.results\n      .filter((character: Character) => !state.hiddenCardIds.includes(character.id))\n      .map((item: Character) => (\n        <Card\n          character={item}\n          key={item.id}\n          handleCloseClick={handleCloseClick}\n          handleCardClick={handleCardClick}\n        />\n      ));\n  } else if (loading) {\n    list = new Array(20).fill(0).map((_, i) => <Placeholder key={i}/>);\n  }\n  return (\n    <div className=\"App\">\n      <Input onInput={handleInput}/>\n      <Container>{list}</Container>\n      <Party selection={state.selection}/>\n    </div>\n  );\n}\n","export const debounce = (fn: (...params: any) => void, timeout: number) => {\n  let id: number;\n\n  return (...params: any) => {\n    if (id) {\n      clearTimeout(id);\n    }\n    id = setTimeout(() => fn(...params), timeout);\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { Home } from './components/Home';\n\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n});\n\nfunction App(): any {\n  return (\n    <ApolloProvider client={client}>\n      <Home/>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}